<!DOCTYPE html>
<html lang="ko">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>13 MVC + 동적 폼 실습</title>

    <!-- Axios CDN -->
    <script src="https://unpkg.com/axios/dist/axios.min.js"></script>
    <style>
      label {
        display: flex;
      }
      label span {
        width: 90px;
      }
      .succss {
        color: blue;
        font-weight: 700;
      }
      .error {
        color: red;
        font-weight: 700;
      }
    </style>
  </head>
  <body>
    <form name="register">
      <label>
        <span>아이디</span>
        <input type="text" name="id" required />
      </label>

      <label>
        <span>비밀번호</span>
        <input type="password" name="pw" required />
      </label>

      <br />
      <button type="button" onclick="clickLogin()">로그인1</button>
      <button type="button" onclick="clickLogin2()">로그인2</button>
    </form>
    <div class="result"></div>

    <script>
      const resultBox = document.querySelector(".result");
      function clickLogin() {
        const form = document.forms["register"];

        const data = {
          userId: form.id.value,
          userPw: form.pw.value,
        };
        // console.log(data);

        // 유효성 검사
        // form 태그였다면 required를 적어주고, submit버튼을 눌렀을때 알아서 유효성 검사를 해줌.
        // 지금은 button태그이기 때문에 뭔가를 적지 않아도 제출이 되므로 그것을 막아주기 위해 checkvalidty를 사용
        if (!form.id.checkValidity() || !form.pw.checkValidity()) {
          result.textContent = "아이디와 비밀번호는 필수값입니다.";
          return;
        }
        // required가 작성이 되어있는 input에 입력란에 잘 입력이 되어있으면 true반환 아니면 false반환
        // true일때 if문을 돌게 하기 위해 !를 붙여줌. 둘 중에 하나라도 reauired가 안되면 '안내문구'를 return을 시켜줌

        axios({
          method: "post",
          url: "/login",
          data: data, // key 이름이랑 data이름이랑 같을경우 그냥 data만 적어줘도 상관없음
        })
          .then((response) => {
            console.log(response);
            console.log(response.data);
            // 이 부분은 api를 다 만들고 확인 할 수 있다.
            // Cuser에서 api 만들고 와서 확인 결과 response.data는 isSuccess를 가지고 있다는 점.
            if (response.data.isSuccess) {
              resultBox.textContent = "로그인 성공";
              resultBox.classList.add("success");
              resultBox.classList.remove("error");
            } else {
              resultBox.textContent = "로그인 실패";
              resultBox.classList.add("error");
              resultBox.classList.remove("success");
            }
          })
          .catch((err) => {
            console.error("err!", err);
          });
      }
      async function clickLogin2() {
        try {
          const form = document.forms["register"];
          const data = {
            id: form.id.value,
            pw: form.pw.value,
          };
          const res = await axios({
            method: "post",
            url: "/login2",
            data: data,
          });
          console.log(res);
          console.log(res.data);
          // resultBox.textContent = `POST /axios async ~ await문으로 요청 완료! ${res.data.id}님의 비밀번호는 ${res.data.pw}`;
        } catch (err) {
          console.error(err);
        }
      }
    </script>
  </body>
</html>
